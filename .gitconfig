[user]
    name = vchirikov
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = true
    ignorecase = true
    hideDotFiles = dotGitOnly
[init]
    defaultBranch = master
[core]
    autocrlf = input
    eol = lf
    sparseCheckout = true
    editor = code --wait
    # https://github.com/sharkdp/bat
    pager = bat --pager=never --theme="OneHalfDark" --style=numbers,changes
    longpaths = true
    # fixes UAC issues (don't need to run git as admin)
    fscache = true
    # https://github.com/git-for-windows/git/wiki/Symbolic-Links#allowing-non-administrators-to-create-symbolic-links
    # it may also be useful to set the env variable MSYS=winsymlinks:nativestrict
    symlinks = true
    # https://github.com/git-for-windows/git/discussions/3251
    # use fs-enable/fs-disable aliases
    useBuiltinFSMonitor = false
    untrackedcache = true
[alias]
    fs-status = fsmonitor--daemon status
    fs-stop = "!f() { \
        echo -e \"\\e[1;34mStop git file system monitoring daemon\\e[0m\" ; \
        git fsmonitor--daemon stop ; \
        git fsmonitor--daemon status ; \
    }; f"
    fs-enable = "!f() { \
        echo -e \"\\e[1;34mEnable git file system monitoring\\e[0m\" ; \
        git config core.useBuiltinFSMonitor true ; \
        git config --unset core.fsmonitor ; \
        git update-index --fsmonitor ; \
    }; f"
    fs-disable = "!f() { \
        echo -e \"\\e[1;34mDisable git file system monitoring\\e[0m\" ; \
        git config --unset core.useBuiltinFSMonitor ; \
        git config --unset core.fsmonitor ; \
        git update-index --no-fsmonitor ; \
        git fsmonitor--daemon stop ; \
    }; f"
    download = "!f() { \
            dir=$(echo $1 | sed 's/https*:\\/\\/[^\\/]*\\///') ; \
            if [ -z \"${2+x}\" ]; then \
                echo -e \"\\e[1;34mDownload ${1} into ${GIT_PREFIX:-.}/${dir}\\e[0m\" ; \
                git clone --depth 1 $1 ${GIT_PREFIX:-.}/$dir ; \
                git fs-disable ; \
            else \
                echo -e \"\\e[1;34mDownload only ${2} into ${GIT_PREFIX:-.}/${dir}\\e[0m\" ; \
                git clone --depth 1 --filter=blob:none --sparse $1 ${GIT_PREFIX:-.}/$dir ; \
                cd ${GIT_PREFIX:-.}/$dir ; \
                git sparse-checkout set ${2-.} \
                git fs-disable ; \
                cd - ; \
            fi ; \
        }; f"
    # Line of code - diff with empty tree
    loc = diff --shortstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    f = fetch --force --tags --prune --prune-tags --jobs=12 --progress --all
    pf = push --force-with-lease
    # How it works: [git fixup: --amend for older commits](https://blog.filippo.io/git-fixup-amending-an-older-commit/)  
    fixup = "!f() { \
        TARGET="" ; \
        if [ -z \"${1+x}\" ] || [ \"${1}\" == \"fzf\" ]; then \
            TARGET=$(git fzf) ; \
        else \
            TARGET=$(git rev-parse "HEAD~${1}" &> /dev/null ; if [ $? -eq 0 ]; then git rev-parse "HEAD~${1}" ; else git rev-parse "${1}" ; fi ;) ; \
        fi ; \
        echo -e \"\\e[1;34mFixup '${TARGET}' commit\\e[0m\" ; \
        git commit --fixup=$TARGET ${@:2} && GIT_EDITOR=true git rebase -i --autostash --autosquash $TARGET^ ; \
    }; f"
    lg = "!f() { git log --color --oneline -n ${1-10} ; }; f"
    fzf = "!f() { git log -n ${1-50} --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o echo ; }; f"
    it = !git init && git commit -m root --allow-empty
    st = status --short --branch
    filelog = log -u
    flg = log -u
    r = reset
    ri = "!f() { echo rebase interactive back to ${1-3}; git rebase -i HEAD~${1-3} ; }; f"
    rc = rebase --continue
    ra = rebase --abort
    rs = rebase --skip
    rst ="!f() { echo -e \"\\e[1;34mReset soft back ${1-1}\\e[0m\" ; git reset --soft HEAD~${1-1} ; }; f"
    undo ="!f() { echo -e \"\\e[1;34mReset soft back ${1-1}\\e[0m\" ; git reset --soft HEAD~${1-1} ; }; f"
    stashes = stash list
    remotes = remote -v
    pruner = !git prune --expire=now && git reflog expire --expire-unreachable=now --rewrite --all
    repacker = !git repack -a -d -f --depth=300 --window=300 --window-memory=1g
    go = switch
    # branch
    branches = branch --all -vv
    bpwd = rev-parse --abbrev-ref HEAD
    bls = branch --all -vv 
    brm = branch --delete
    brmf = branch -D
    bmv = branch --move
    branch-remote-rm = push --delete
    brrm = push --delete
    bclean-merged = "!f() { git branch --merged ${1-master} | egrep -v '(${1-master}|\\*|\\+)' | xargs -r git branch -d; }; f"
    bclean = "!f() { git branch | egrep -v '(master|main|\\*|\\+)' | xargs -r git branch -D; }; f"
    hide = update-index --assume-unchanged
    unhide = update-index --no-assume-unchanged
    unhide-all = !git ls-files -v | grep '^[a-z]' | cut -c3- | xargs git update-index --no-assume-unchanged --
    hidden = !git ls-files -v | grep '^[a-z]' | cut -c3-
    wipe = !git add --all && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    gh-clean = !gh-clean-notifications
    # find/show the merge commit when a given commit was merged into current or given branch
    # git find-merge <SHA-1> [master]
    find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
    # show what branches you have been working on lately
    my = "!f() { git for-each-ref --sort='-authordate:iso8601' --count ${1-15} --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads ; }; f"
[extensions]
    worktreeConfig = true
[fetch]
    prune = true
    pruneTags = true
    output = compact
    parallel = 8
[rebase]
    autoStash = true
    autoSquash = true
[worktree]
    guessRemote = true
[push]
    default = current
    followTags = true
[url "https://github.com/"]
    insteadOf = github:
[url "https://github.com/"]
    insteadOf = gh:
[url "https://github.com/vchirikov/"]
    insteadOf = my:
[diff]
    renameLimit = 9999999
    submodule = log
[interactive]
    useBuiltin = true
    singleKey = true
[feature]
    # because it also turns on core.useBuiltinFSMonitor
    experimental = false
    manyFiles = true
[rerere]
    enabled = 1
    autoUpdate = true
[merge]
    conflictstyle = diff3
    autoStash = true
[status]
    submodulesummary = 1
[submodule]
    recurse = true
[color "status"]
    added = green bold
    changed = red bold strike
    untracked = cyan
    branch = yellow black bold ul
[pull] 
    # https://github.blog/2021-08-16-highlights-from-git-2-33/
    # this is used for any merge, not just git pull, ort == new recursive
    twohead = ort
