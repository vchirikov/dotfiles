[
  {
    "key": "f5",
    // "command": "test-explorer.debug-test-at-cursor",
    // this command (as well as test-explorer.debug-this-test) doesn't work 
    // with https://github.com/Derivitec/vscode-dotnet-adapter
    // but at least rerun under debug works
    "command": "test-explorer.redebug",
    "when": "editorTextFocus && !inDebugMode && resourceLangId == 'csharp' && debuggersAvailable && resourceFilename =~ /Tests/"
  },
  {
    "key": "ctrl+numpad0",
    "command": "editor.action.fontZoomReset",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+`",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  {
    "key": "ctrl+shift+s",
    "command": "saveAll"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal"
  },
  {
    "key": "alt+r",
    "command": "git.refresh",
  },
  {
    "key": "alt+\\",
    "command": "workbench.action.showAllSymbols"
  },
  {
    "key": "ctrl+t",
    "command": "-workbench.action.showAllSymbols"
  },
  {
    "key": "alt+enter",
    "command": "editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+.",
    "command": "-editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+r ctrl+r",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+f2",
    "command": "-editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+right",
    "command": "cursorWordPartRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+right",
    "command": "cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+left",
    "command": "cursorWordPartStartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+left",
    "command": "cursorWordPartStartLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+backspace",
    "command": "deleteWordPartLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+backspace",
    "command": "deleteWordPartRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+y",
    "command": "extension.downloadSettings"
  },
  {
    "key": "shift+alt+d",
    "command": "-extension.downloadSettings"
  },
  {
    "key": "shift+alt+d",
    "command": "workbench.action.tasks.build"
  },
  {
    "key": "f6",
    "command": "workbench.action.tasks.build",
    "when": "!inDebugMode"
  },
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.tasks.build"
  },
  {
    "key": "alt+q",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "alt+f1",
    "command": "workbench.action.tasks.runTask"
  },
  {
    "key": "ctrl+f1",
    "command": "workbench.action.tasks.terminate"
  },
  {
    "key": "shift+alt+q",
    "command": "workbench.actions.view.problems"
  },
  {
    "key": "alt+f11",
    "command": "ilspy.decompileAssemblyInWorkspace"
  },
  {
    "key": "alt+f7",
    "command": "merge-conflict.next"
  },
  {
    "key": "alt+f6",
    "command": "merge-conflict.previous"
  },
  {
    "key": "ctrl+shift+v",
    "command": "-markdown.showPreview",
    "when": "editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+shift+v",
    "command": "-markdown-preview-enhanced.openPreview",
    "when": "editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+k v",
    "command": "-markdown-preview-enhanced.openPreviewToTheSide",
    "when": "editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+shift+alt+v",
    "command": "markdown.extension.togglePreview",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+v",
    "command": "-markdown.extension.togglePreview",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+v",
    "command": "markdown.extension.togglePreviewToSide",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+k v",
    "command": "-markdown.extension.togglePreviewToSide",
    "when": "!terminalFocus"
  },
  {
    "key": "shift+alt+enter",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+k z",
    "command": "-workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+shift+s",
    "command": "-workbench.action.files.saveLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+alt+s",
    "command": "workbench.action.files.saveAs"
  },
  {
    "key": "ctrl+shift+s",
    "command": "-workbench.action.files.saveAs"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveFiles"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.duplicateSelection",
    "when": "editorTextFocus && !editorReadonly && editorHasSelection"
  },
  {
    "key": "ctrl+shift+alt+e",
    "command": "slnbrw.focus"
  },
  {
    "key": "shift+alt+-",
    "command": "workbench.action.splitEditorDown"
  },
  {
    "key": "shift+alt+=",
    "command": "workbench.action.splitEditorRight"
  },
  {
    "key": "shift+alt+r",
    "command": "-remote-wsl.revealInExplorer",
    "when": "editorFocus && remoteName == 'wsl'"
  },
  {
    "key": "ctrl+shift+e",
    "command": "revealInExplorer",
    "when": "editorFocus"
  },
  {
    "key": "shift+f6",
    "command": "workbench.action.debug.pause",
    "when": "debugState == 'running'"
  },
  {
    "key": "f6",
    "command": "-workbench.action.debug.pause",
    "when": "debugState == 'running'"
  },
  {
    "key": "f6",
    "command": "debug.jumpToCursor",
    "when": "inDebugMode"
  },
  {
    "key": "tab",
    "command": "tabout",
    "when": "editorTextFocus && !editorHasSelection && !inSnippetMode && !editorTabMovesFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "references-view.find",
    "when": "editorHasReferenceProvider && editorTextFocus"
  },
  {
    "key": "shift+f12",
    "command": "references-view.find",
    "when": "editorHasReferenceProvider && editorTextFocus"
  },
  {
    "key": "shift+alt+f12",
    "command": "-references-view.find",
    "when": "editorHasReferenceProvider"
  },
  {
    "key": "shift+alt+f12",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "shift+f12",
    "command": "-editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "-workbench.action.keybindingsReference"
  },
  {
    "key": "ctrl+alt+f12",
    "command": "editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+f12",
    "command": "-editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+f12",
    "command": "references-view.findImplementations",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+alt+space",
    "command": "editor.action.showHover",
    "when": "!parameterHintsVisible && !suggestWidgetVisible && editorTextFocus"
  },
  // should also run `closeParameterHints`, but "command" doesn't support arrays
  {
    "key": "ctrl+shift+space",
    "command": "editor.action.showHover",
    "when": "parameterHintsVisible && !suggestWidgetVisible && editorTextFocus"
  },
  // additional bindings for vscode-keybindings-alt+hjkl-zation.py
  {
    "key": "ctrl+alt+l",
    "command": "cursorWordPartRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+l",
    "command": "cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+h",
    "command": "cursorWordPartStartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+h",
    "command": "cursorWordPartStartLeftSelect",
    "when": "textInputFocus"
  },
  // These keybindings are auto-generated with C:\Tools\vscode-keybindings-alt+hjkl-zation.py
  {
    "key": "alt+ctrl+0",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+4",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+shift+0",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+shift+4",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+j",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+shift+j",
    "command": "cursorDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+j",
    "command": "cursorDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+0",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "alt+4",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "alt+shift+0",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "alt+shift+4",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "alt+1",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+1",
    "command": "cursorHomeSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+h",
    "command": "cursorLeft",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+h",
    "command": "cursorLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+f",
    "command": "cursorPageDown",
    "when": "textInputFocus"
  },
  //{"key": "alt+shift+f", "command": "cursorPageDownSelect", "when": "textInputFocus"},
  {
    "key": "alt+ctrl+b",
    "command": "cursorPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+u",
    "command": "cursorPageUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+l",
    "command": "cursorRight",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+l",
    "command": "cursorRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+1",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+shift+1",
    "command": "cursorTopSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+k",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+shift+k",
    "command": "cursorUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+k",
    "command": "cursorUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+r",
    "command": "redo"
  },
  {
    "key": "alt+shift+r",
    "command": "redo"
  },
  //{"key": "alt+u", "command": "undo"},
  {
    "key": "alt+shift+j",
    "command": "cursorColumnSelectDown",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "alt+shift+h",
    "command": "cursorColumnSelectLeft",
    "when": "editorColumnSelection && textInputFocus"
  },
  //{"key": "alt+shift+f", "command": "cursorColumnSelectPageDown", "when": "editorColumnSelection && textInputFocus"},
  {
    "key": "alt+shift+u",
    "command": "cursorColumnSelectPageUp",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "alt+shift+l",
    "command": "cursorColumnSelectRight",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "alt+shift+k",
    "command": "cursorColumnSelectUp",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "alt+[Slash]",
    "command": "actions.find",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "alt+e",
    "command": "cursorWordEndRight",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+e",
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+b",
    "command": "cursorWordLeft",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+b",
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+[Slash]",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+y",
    "command": "editor.action.clipboardCopyAction"
  },
  {
    "key": "alt+d",
    "command": "editor.action.clipboardCutAction"
  },
  {
    "key": "alt+p",
    "command": "editor.action.clipboardPasteAction"
  },
  {
    "key": "alt+[Slash]",
    "command": "editor.action.extensioneditor.showfind",
    "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "alt+[Slash]",
    "command": "editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "alt+n",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+ctrl+n",
    "command": "editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+shift+n",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+ctrl+shift+n",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+[Slash]",
    "command": "editor.action.webvieweditor.showFind",
    "when": "!editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "alt+j",
    "command": "notebook.focusNextEditor",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  },
  {
    "key": "alt+k",
    "command": "notebook.focusPreviousEditor",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  {
    "key": "alt+[Slash]",
    "command": "repl.action.filter",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "alt+j",
    "command": "settings.action.focusSettingsFile",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "alt+[Slash]",
    "command": "settings.action.search",
    "when": "inSettingsEditor"
  },
  {
    "key": "alt+b",
    "command": "cursorWordAccessibilityLeft",
    "when": "accessibilityModeEnabled && textInputFocus"
  },
  {
    "key": "alt+shift+b",
    "command": "cursorWordAccessibilityLeftSelect",
    "when": "accessibilityModeEnabled && textInputFocus"
  },
  {
    "key": "alt+e",
    "command": "cursorWordAccessibilityRight",
    "when": "accessibilityModeEnabled && textInputFocus"
  },
  {
    "key": "alt+shift+e",
    "command": "cursorWordAccessibilityRightSelect",
    "when": "accessibilityModeEnabled && textInputFocus"
  },
  {
    "key": "alt+j",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "alt+k",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "alt+ctrl+f",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "alt+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "alt+ctrl+b",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "alt+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "alt+e",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+l",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+b",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+h",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+j",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+j",
    "command": "history.showNext",
    "when": "historyNavigationEnabled && historyNavigationWidget"
  },
  {
    "key": "alt+k",
    "command": "history.showPrevious",
    "when": "historyNavigationEnabled && historyNavigationWidget"
  },
  {
    "key": "alt+y",
    "command": "keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "alt+j",
    "command": "keybindings.editor.focusKeybindings",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "alt+[Slash]",
    "command": "keybindings.editor.searchKeybindings",
    "when": "inKeybindings"
  },
  {
    "key": "alt+h",
    "command": "list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+b",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+l",
    "command": "list.expand",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+shift+j",
    "command": "list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "alt+shift+k",
    "command": "list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "alt+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+1",
    "command": "list.focusFirst",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+0",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+4",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+ctrl+f",
    "command": "list.focusPageDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+ctrl+b",
    "command": "list.focusPageUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+[Slash]",
    "command": "notebook.find",
    "when": "notebookEditorFocused"
  },
  {
    "key": "alt+ctrl+0",
    "command": "notebook.focusBottom",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "alt+ctrl+4",
    "command": "notebook.focusBottom",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "alt+ctrl+1",
    "command": "notebook.focusTop",
    "when": "notebookEditorFocused && !inputFocus"
  },
  //{"key": "alt+h", "command": "notebook.fold", "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"},
  //{"key": "alt+l", "command": "notebook.unfold", "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"},
  {
    "key": "alt+h",
    "command": "notification.collapse",
    "when": "notificationFocus"
  },
  {
    "key": "alt+l",
    "command": "notification.expand",
    "when": "notificationFocus"
  },
  {
    "key": "alt+1",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+ctrl+b",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+0",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+4",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+ctrl+f",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+j",
    "command": "notifications.focusNextToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+k",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "alt+y",
    "command": "problems.action.copy",
    "when": "problemFocus"
  },
  {
    "key": "alt+[Slash]",
    "command": "problems.action.focusFilter",
    "when": "focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "alt+j",
    "command": "scm.viewNextCommit",
    "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "alt+k",
    "command": "scm.viewPreviousCommit",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "alt+y",
    "command": "search.action.copyMatch",
    "when": "fileMatchOrMatchFocus"
  },
  {
    "key": "alt+j",
    "command": "settings.action.focusSettingsFromSearch",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "alt+h",
    "command": "settings.action.focusTOC",
    "when": "inSettingsEditor && settingRowFocus"
  },
  {
    "key": "alt+[Slash]",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "alt+[Slash]",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "alt+[Slash]",
    "command": "workbench.action.debug.run",
    "when": "debuggersAvailable"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.interactivePlayground.arrowDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.interactivePlayground.arrowUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "alt+ctrl+f",
    "command": "workbench.action.interactivePlayground.pageDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "alt+ctrl+b",
    "command": "workbench.action.interactivePlayground.pageUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "alt+y",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  {
    "key": "alt+n",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+shift+n",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+[Slash]",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+p",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus && terminalProcessSupported"
  },
  //{"key": "alt+shift+f", "command": "workbench.action.terminal.scrollDownPage", "when": "terminalFocus && terminalProcessSupported"},
  {
    "key": "alt+ctrl+0",
    "command": "workbench.action.terminal.scrollToBottom",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+ctrl+4",
    "command": "workbench.action.terminal.scrollToBottom",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+ctrl+1",
    "command": "workbench.action.terminal.scrollToTop",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+shift+u",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+p",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u0016"
    }
  },
  {
    "key": "alt+1",
    "command": "workbench.statusBar.focusFirst",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+0",
    "command": "workbench.statusBar.focusLast",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+4",
    "command": "workbench.statusBar.focusLast",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+j",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+l",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+k",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+h",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "alt+e",
    "command": "breadcrumbs.focusNextWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "alt+b",
    "command": "breadcrumbs.focusPreviousWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "alt+y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "alt+d",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "alt+p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "alt+1",
    "command": "firstCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "alt+0",
    "command": "lastCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "alt+4",
    "command": "lastCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "alt+l",
    "command": "nextCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "alt+h",
    "command": "previousCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "alt+y",
    "command": "remote.tunnel.copyAddressInline",
    "when": "tunnelViewFocus && tunnelType == 'Detected' || tunnelViewFocus && tunnelType == 'Forwarded'"
  },
  {
    "key": "alt+[Slash]",
    "command": "PowerShell.ShowHelp",
    "when": "editorTextFocus && editorLangId == 'powershell'"
  },
  {
    "key": "alt+[Slash]",
    "command": "extension.node-debug.pickLoadedScript",
    "when": "debugType == 'edge'"
  },
  {
    "key": "alt+h",
    "command": "gitlens.key.left",
    "when": "gitlens:key:left"
  },
  {
    "key": "alt+shift+n",
    "command": "hediet.vscode-drawio.linkCodeWithSelectedNode",
    "when": "!findWidgetVisible"
  },
  {
    "key": "alt+y",
    "command": "solutionExplorer.copy",
    "when": "view == 'slnexpl' && viewItem == 'project-folder'"
  },
  {
    "key": "alt+y",
    "command": "solutionExplorer.copy",
    "when": "view == 'slnexpl' && viewItem == 'project-file'"
  },
  {
    "key": "alt+b",
    "command": "gitlens.key.ctrl+left",
    "when": "gitlens:key:ctrl+left"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnexpl' && viewItem == 'project-folder'"
  },
  {
    "key": "alt+l",
    "command": "gitlens.key.right",
    "when": "gitlens:key:right"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnexpl' && viewItem == 'project-cps'"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnexpl' && viewItem == 'project-standard'"
  },
  {
    "key": "alt+e",
    "command": "gitlens.key.ctrl+right",
    "when": "gitlens:key:ctrl+right"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnexpl' && viewItem == 'project-website'"
  },
  {
    "key": "alt+p",
    "command": "markdown.extension.editing.paste",
    "when": "editorHasSelection && editorTextFocus && editorLangId == 'markdown'"
  },
  {
    "key": "alt+y",
    "command": "solutionExplorer.copy",
    "when": "view == 'slnbrw' && viewItem == 'project-folder'"
  },
  {
    "key": "alt+y",
    "command": "solutionExplorer.copy",
    "when": "view == 'slnbrw' && viewItem == 'project-file'"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnbrw' && viewItem == 'project-folder'"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnbrw' && viewItem == 'project-cps'"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnbrw' && viewItem == 'project-standard'"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.branches.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/"
  },
  {
    "key": "alt+p",
    "command": "solutionExplorer.paste",
    "when": "view == 'slnbrw' && viewItem == 'project-website'"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.commits.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.contributors.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.fileHistory.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.lineHistory.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.remotes.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.repositories.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.stashes.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.searchAndCompare.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/"
  },
  {
    "key": "alt+y",
    "command": "gitlens.views.tags.copy",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/"
  },
  // Hardcoded keybindings
  {
    "key": "alt+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+w",
    "command": "cursorWordStartRight",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+w",
    "command": "cursorWordStartRightSelect",
    "when": "textInputFocus"
  },
  //{"key": "ctrl+alt+u", "command": "cursorMove", "args": {"to": "up", "by": "line", "value": 20}, "when": "textInputFocus"},
  //{"key": "shift+alt+u", "command": "cursorMove", "args": {"to": "up", "by": "line", "value": 20, "select": true}, "when": "textInputFocus"},
  //{"key": "ctrl+alt+d", "command": "cursorMove", "args": {"to": "down", "by": "line", "value": 20}, "when": "textInputFocus"},
  // {"key": "shift+alt+d", "command": "cursorMove", "args": {"to": "down", "by": "line", "value": 20, "select": true}, "when": "textInputFocus"},
  {
    "key": "ctrl+alt+y",
    "command": "scrollLineUp",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+y",
    "command": "scrollLineUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+e",
    "command": "scrollLineDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+i",
    "command": "workbench.action.navigateToLastEditLocation",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+i",
    "command": "workbench.action.navigateToLastEditLocation",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+o",
    "command": "workbench.action.navigateForward",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+o",
    "command": "workbench.action.navigateForward",
    "when": "textInputFocus"
  },
  {
    "key": "alt+g alt+g",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "alt+g alt+shift+g",
    "command": "cursorTopSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+g",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  {
    "key": "alt+ctrl+shift+g",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+5",
    "command": "editor.action.jumpToBracket",
    "when": "textInputFocus"
  },
  // End of generated keybindings
  // unbind some related to hjkl commands
  {
    "key": "ctrl+alt+j",
    "command": "-bookmarks.jumpToPrevious",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+j",
    "command": "-liveshare.join"
  },
  {
    "key": "alt+ctrl+f",
    "command": "-cursorPageDown"
  },
  {
    "key": "alt+ctrl+f",
    "command": "editor.action.formatDocument",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+shift+f",
    "command": "editor.action.formatDocument",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+ctrl+shift+f",
    "command": "editor.action.formatChanges",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "cursorMove",
    "args": {
      "to": "up",
      "by": "line",
      "value": 5
    },
    "when": "textInputFocus"
  },
  {
    "key": "shift+ctrl+alt+k",
    "command": "cursorMove",
    "args": {
      "to": "up",
      "by": "line",
      "value": 5,
      "select": true
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+j",
    "command": "cursorMove",
    "args": {
      "to": "down",
      "by": "line",
      "value": 5
    },
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+ctrl+alt+j",
    "command": "cursorMove",
    "args": {
      "to": "down",
      "by": "line",
      "value": 5,
      "select": true
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+z",
    "command": "undo"
  },
  {
    "key": "alt+y",
    "command": "deleteLeft",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+y",
    "command": "deleteWordPartLeft",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+u",
    "command": "deleteRight",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+u",
    "command": "deleteWordPartRight",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+2",
    "command": "cursorPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "alt+3",
    "command": "cursorPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+2",
    "command": "cursorPageDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+3",
    "command": "cursorPageUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+;",
    "command": "extension.eol-semicolon-cr",
    "when": "textInputFocus"
  },
]